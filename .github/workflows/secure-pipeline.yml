
name: frontend-ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "candidate-assessment" ]
    paths:
      - 'country-flags-app-main/**'
      - '.github/**'
  pull_request:
    branches: [ "main", "candidate-assessment" ]
    paths:
      - 'country-flags-app-main/**'
      - '.github/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  frontend-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: Sonarcloud
    strategy:
      matrix:
        node-version: [18.x]

    defaults:
      run:
        working-directory: country-flags-app-main

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v4
          
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Yarn
        run: npm install -g yarn
        working-directory: country-flags-app-main

      - name: Install Dependencies
        run: yarn install
        working-directory: country-flags-app-main
        

      - name: Yarn Build
        run: yarn build
        working-directory: country-flags-app-main

      - name: SonarCube Scan
        uses: sonarsource/sonarcloud-github-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: country-flags-app-main/src
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }}
            -Dsonar.javascript.lcov.reportPaths=./country-flags-app-main/coverage/lcov.info
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.qualitygate.wait=false
            -Dsonar.verbose=false

      - name: Run Lint
        continue-on-error: true
        run: yarn lint --quiet
        working-directory: country-flags-app-main

      - name: Run Test
        run: yarn run test:coverage
        working-directory: country-flags-app-main

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER }}

      - name: Docker Build
        run: |
          ls -latrR 
          docker build -t country-flags-app-main:${{ github.run_number }} . --build-arg FILES=dist/
        working-directory: country-flags-app-main

      - name: Run Trivy Image scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'country-flags-app-main:${{ github.run_number }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Inject Image Tag
        run: |
          sed -i.bak "s/TAG_PARAMETER/${{ github.run_number }}/g" k8s-deployment.yaml
        working-directory: infrastructure/k8s/

      - name: Run Trivy k8s scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: config
          scan-ref: ./infrastructure/k8s/
          severity: 'CRITICAL,HIGH'

      - name: Deploy k8s File
        continue-on-error: true
        run: kubectl apply -f k8s-deployment.yaml
        working-directory: infrastructure/k8s
      
      

          
      

